package com.yuanyang.xiaohu.greendaodemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuanyang.xiaohu.door.bean.CodeRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CODE_RECORD".
*/
public class CodeRecordDao extends AbstractDao<CodeRecord, Long> {

    public static final String TABLENAME = "CODE_RECORD";

    /**
     * Properties of entity CodeRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhoneNum = new Property(1, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Str1 = new Property(2, String.class, "str1", false, "STR1");
        public final static Property Str2 = new Property(3, String.class, "str2", false, "STR2");
        public final static Property Str3 = new Property(4, String.class, "str3", false, "STR3");
        public final static Property Str4 = new Property(5, String.class, "str4", false, "STR4");
        public final static Property DirectionDoor = new Property(6, String.class, "directionDoor", false, "DIRECTION_DOOR");
        public final static Property Accessible = new Property(7, String.class, "accessible", false, "ACCESSIBLE");
    }


    public CodeRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CodeRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CODE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHONE_NUM\" TEXT," + // 1: phoneNum
                "\"STR1\" TEXT," + // 2: str1
                "\"STR2\" TEXT," + // 3: str2
                "\"STR3\" TEXT," + // 4: str3
                "\"STR4\" TEXT," + // 5: str4
                "\"DIRECTION_DOOR\" TEXT," + // 6: directionDoor
                "\"ACCESSIBLE\" TEXT);"); // 7: accessible
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CODE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CodeRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(2, phoneNum);
        }
 
        String str1 = entity.getStr1();
        if (str1 != null) {
            stmt.bindString(3, str1);
        }
 
        String str2 = entity.getStr2();
        if (str2 != null) {
            stmt.bindString(4, str2);
        }
 
        String str3 = entity.getStr3();
        if (str3 != null) {
            stmt.bindString(5, str3);
        }
 
        String str4 = entity.getStr4();
        if (str4 != null) {
            stmt.bindString(6, str4);
        }
 
        String directionDoor = entity.getDirectionDoor();
        if (directionDoor != null) {
            stmt.bindString(7, directionDoor);
        }
 
        String accessible = entity.getAccessible();
        if (accessible != null) {
            stmt.bindString(8, accessible);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CodeRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(2, phoneNum);
        }
 
        String str1 = entity.getStr1();
        if (str1 != null) {
            stmt.bindString(3, str1);
        }
 
        String str2 = entity.getStr2();
        if (str2 != null) {
            stmt.bindString(4, str2);
        }
 
        String str3 = entity.getStr3();
        if (str3 != null) {
            stmt.bindString(5, str3);
        }
 
        String str4 = entity.getStr4();
        if (str4 != null) {
            stmt.bindString(6, str4);
        }
 
        String directionDoor = entity.getDirectionDoor();
        if (directionDoor != null) {
            stmt.bindString(7, directionDoor);
        }
 
        String accessible = entity.getAccessible();
        if (accessible != null) {
            stmt.bindString(8, accessible);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CodeRecord readEntity(Cursor cursor, int offset) {
        CodeRecord entity = new CodeRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // str1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // str2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // str3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // str4
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // directionDoor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // accessible
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CodeRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStr1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStr2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStr3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStr4(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDirectionDoor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccessible(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CodeRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CodeRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CodeRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
