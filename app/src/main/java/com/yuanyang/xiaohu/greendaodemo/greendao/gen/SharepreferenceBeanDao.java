package com.yuanyang.xiaohu.greendaodemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuanyang.xiaohu.door.bean.SharepreferenceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHAREPREFERENCE_BEAN".
*/
public class SharepreferenceBeanDao extends AbstractDao<SharepreferenceBean, Long> {

    public static final String TABLENAME = "SHAREPREFERENCE_BEAN";

    /**
     * Properties of entity SharepreferenceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Open_door_num = new Property(1, String.class, "open_door_num", false, "OPEN_DOOR_NUM");
        public final static Property Open_door_direction_id = new Property(2, String.class, "open_door_direction_id", false, "OPEN_DOOR_DIRECTION_ID");
        public final static Property Open_village_id = new Property(3, String.class, "open_village_id", false, "OPEN_VILLAGE_ID");
        public final static Property Open_door_building = new Property(4, String.class, "open_door_building", false, "OPEN_DOOR_BUILDING");
        public final static Property Open_door_params = new Property(5, String.class, "open_door_params", false, "OPEN_DOOR_PARAMS");
    }


    public SharepreferenceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SharepreferenceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHAREPREFERENCE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPEN_DOOR_NUM\" TEXT," + // 1: open_door_num
                "\"OPEN_DOOR_DIRECTION_ID\" TEXT," + // 2: open_door_direction_id
                "\"OPEN_VILLAGE_ID\" TEXT," + // 3: open_village_id
                "\"OPEN_DOOR_BUILDING\" TEXT," + // 4: open_door_building
                "\"OPEN_DOOR_PARAMS\" TEXT);"); // 5: open_door_params
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHAREPREFERENCE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SharepreferenceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String open_door_num = entity.getOpen_door_num();
        if (open_door_num != null) {
            stmt.bindString(2, open_door_num);
        }
 
        String open_door_direction_id = entity.getOpen_door_direction_id();
        if (open_door_direction_id != null) {
            stmt.bindString(3, open_door_direction_id);
        }
 
        String open_village_id = entity.getOpen_village_id();
        if (open_village_id != null) {
            stmt.bindString(4, open_village_id);
        }
 
        String open_door_building = entity.getOpen_door_building();
        if (open_door_building != null) {
            stmt.bindString(5, open_door_building);
        }
 
        String open_door_params = entity.getOpen_door_params();
        if (open_door_params != null) {
            stmt.bindString(6, open_door_params);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SharepreferenceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String open_door_num = entity.getOpen_door_num();
        if (open_door_num != null) {
            stmt.bindString(2, open_door_num);
        }
 
        String open_door_direction_id = entity.getOpen_door_direction_id();
        if (open_door_direction_id != null) {
            stmt.bindString(3, open_door_direction_id);
        }
 
        String open_village_id = entity.getOpen_village_id();
        if (open_village_id != null) {
            stmt.bindString(4, open_village_id);
        }
 
        String open_door_building = entity.getOpen_door_building();
        if (open_door_building != null) {
            stmt.bindString(5, open_door_building);
        }
 
        String open_door_params = entity.getOpen_door_params();
        if (open_door_params != null) {
            stmt.bindString(6, open_door_params);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SharepreferenceBean readEntity(Cursor cursor, int offset) {
        SharepreferenceBean entity = new SharepreferenceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // open_door_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // open_door_direction_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // open_village_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // open_door_building
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // open_door_params
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SharepreferenceBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpen_door_num(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpen_door_direction_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpen_village_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpen_door_building(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpen_door_params(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SharepreferenceBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SharepreferenceBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SharepreferenceBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
