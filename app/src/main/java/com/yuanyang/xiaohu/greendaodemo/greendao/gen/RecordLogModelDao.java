package com.yuanyang.xiaohu.greendaodemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuanyang.xiaohu.door.bean.RecordLogModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_LOG_MODEL".
*/
public class RecordLogModelDao extends AbstractDao<RecordLogModel, Long> {

    public static final String TABLENAME = "RECORD_LOG_MODEL";

    /**
     * Properties of entity RecordLogModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberMobile = new Property(1, String.class, "memberMobile", false, "MEMBER_MOBILE");
        public final static Property VistorMobile = new Property(2, String.class, "vistorMobile", false, "VISTOR_MOBILE");
        public final static Property ComID = new Property(3, String.class, "comID", false, "COM_ID");
        public final static Property UnitID = new Property(4, String.class, "unitID", false, "UNIT_ID");
        public final static Property ComdoorID = new Property(5, String.class, "comdoorID", false, "COMDOOR_ID");
        public final static Property Orientation = new Property(6, String.class, "orientation", false, "ORIENTATION");
        public final static Property Category = new Property(7, String.class, "category", false, "CATEGORY");
        public final static Property Addr = new Property(8, String.class, "addr", false, "ADDR");
        public final static Property Lat = new Property(9, String.class, "lat", false, "LAT");
        public final static Property Lng = new Property(10, String.class, "lng", false, "LNG");
        public final static Property Cardno = new Property(11, String.class, "cardno", false, "CARDNO");
        public final static Property Devicemac = new Property(12, String.class, "devicemac", false, "DEVICEMAC");
        public final static Property Type = new Property(13, String.class, "type", false, "TYPE");
        public final static Property Date = new Property(14, String.class, "date", false, "DATE");
    }


    public RecordLogModelDao(DaoConfig config) {
        super(config);
    }
    
    public RecordLogModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_LOG_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEMBER_MOBILE\" TEXT," + // 1: memberMobile
                "\"VISTOR_MOBILE\" TEXT," + // 2: vistorMobile
                "\"COM_ID\" TEXT," + // 3: comID
                "\"UNIT_ID\" TEXT," + // 4: unitID
                "\"COMDOOR_ID\" TEXT," + // 5: comdoorID
                "\"ORIENTATION\" TEXT," + // 6: orientation
                "\"CATEGORY\" TEXT," + // 7: category
                "\"ADDR\" TEXT," + // 8: addr
                "\"LAT\" TEXT," + // 9: lat
                "\"LNG\" TEXT," + // 10: lng
                "\"CARDNO\" TEXT," + // 11: cardno
                "\"DEVICEMAC\" TEXT," + // 12: devicemac
                "\"TYPE\" TEXT," + // 13: type
                "\"DATE\" TEXT);"); // 14: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_LOG_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordLogModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberMobile = entity.getMemberMobile();
        if (memberMobile != null) {
            stmt.bindString(2, memberMobile);
        }
 
        String vistorMobile = entity.getVistorMobile();
        if (vistorMobile != null) {
            stmt.bindString(3, vistorMobile);
        }
 
        String comID = entity.getComID();
        if (comID != null) {
            stmt.bindString(4, comID);
        }
 
        String unitID = entity.getUnitID();
        if (unitID != null) {
            stmt.bindString(5, unitID);
        }
 
        String comdoorID = entity.getComdoorID();
        if (comdoorID != null) {
            stmt.bindString(6, comdoorID);
        }
 
        String orientation = entity.getOrientation();
        if (orientation != null) {
            stmt.bindString(7, orientation);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(8, category);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(9, addr);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(10, lat);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(11, lng);
        }
 
        String cardno = entity.getCardno();
        if (cardno != null) {
            stmt.bindString(12, cardno);
        }
 
        String devicemac = entity.getDevicemac();
        if (devicemac != null) {
            stmt.bindString(13, devicemac);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(14, type);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(15, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordLogModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberMobile = entity.getMemberMobile();
        if (memberMobile != null) {
            stmt.bindString(2, memberMobile);
        }
 
        String vistorMobile = entity.getVistorMobile();
        if (vistorMobile != null) {
            stmt.bindString(3, vistorMobile);
        }
 
        String comID = entity.getComID();
        if (comID != null) {
            stmt.bindString(4, comID);
        }
 
        String unitID = entity.getUnitID();
        if (unitID != null) {
            stmt.bindString(5, unitID);
        }
 
        String comdoorID = entity.getComdoorID();
        if (comdoorID != null) {
            stmt.bindString(6, comdoorID);
        }
 
        String orientation = entity.getOrientation();
        if (orientation != null) {
            stmt.bindString(7, orientation);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(8, category);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(9, addr);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(10, lat);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(11, lng);
        }
 
        String cardno = entity.getCardno();
        if (cardno != null) {
            stmt.bindString(12, cardno);
        }
 
        String devicemac = entity.getDevicemac();
        if (devicemac != null) {
            stmt.bindString(13, devicemac);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(14, type);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(15, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordLogModel readEntity(Cursor cursor, int offset) {
        RecordLogModel entity = new RecordLogModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // memberMobile
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vistorMobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unitID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comdoorID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orientation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // category
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // addr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lat
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lng
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // cardno
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // devicemac
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordLogModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberMobile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVistorMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComdoorID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrientation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCategory(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLat(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLng(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCardno(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDevicemac(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordLogModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordLogModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordLogModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
